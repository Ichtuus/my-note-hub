security:
    encoders:
        App\Entity\User\User:
            algorithm: bcrypt

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User\User
                property: username

    firewalls:
#        login:
#            pattern:  ^/api/login
#            stateless: true
#            anonymous: true
#            json_login:
#                check_path: /api/login_access
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#
#        api:
#            pattern:   ^/api
#            stateless: true
#            provider: app_user_provider
#            guard:
#                authenticators:
#                    - lexik_jwt_authentication.jwt_token_authenticator
#
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            provider: app_user_provider
            form_login:
                login_path: /user/me/login
                check_path: mnh_user_login

            logout:
                path: mnh_user_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
